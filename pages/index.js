import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Link from 'next/link';
import data from '../data.json'
import { useState } from 'react';
import Sidebar from '../components/sidebar';
import useLocalStorage from 'use-local-storage'
import Viewtask from '../components/view_task';
import Addtask from '../components/add_task';
import { useEffect } from 'react';

export default function Home() {
  // const initCards = JSON.parse(localStorage.getItem('todos'))
  const [todoCards, setTodoCards] = useState([])
  const [theme, setTheme] = useLocalStorage('theme' ? 'dark' : 'light')

  const switchTheme = () => {
    console.log("?")
    const newTheme = theme === 'light' ? 'dark' : 'light'
    setTheme(newTheme)
  }
  // console.log(todoCards);
  const options = [
    { value: "Todo", label: "Todo"},
    { value: "Doing", label: "Doing"},
    { value: "Done", label: "Done"}
  ]

  const [stage, setStage] = useState(options[0].value)

  const [inputList, setInputList] = useState([{ title: "", isCompleted: false }]);
  const [taskTitle, setTaskTitle] = useState("")
  console.log("taskTitle: ", taskTitle);
  const [taskDescription, setTaskDescription] = useState("")
  

  const [modalOpened, setModalOpened] = useState(false)
  const [modalAddTask, setModalAddTask] = useState(false)
  const [selectedTitle, setSelectedTitle] = useState("");
  const handleClicked = (title) => {
    // const selectedCol = column;
    setSelectedTitle(title);
    setModalOpened(true)
    // console.log(selectedTitle, selecte)
  }

  const [sidebarOpened, setSidebarOpened] = useState(false)
  const [selectedBoard, setSelectedBoard] = useState("Platform Launch")

  const handleAddTask = () => {
    console.log(taskTitle, taskDescription, stage)
    console.log(inputList);
    const allProducts = todoCards
    const newItem = {"title": taskTitle, "description": taskDescription, "status": stage, "subtasks": inputList}
    const newCard = allProducts.boards.filter((board) => board.name === selectedBoard)[0].columns.filter((column) => column.name === 'Todo')[0]
    if (typeof newCard.tasks === "undefined") {
      newCard.tasks = [newItem]
    }
    else newCard.tasks.push(newItem)
    // console.log(newCard);
    setTodoCards(allProducts)
    localStorage.setItem('todos', JSON.stringify(allProducts))
    setModalAddTask(false)
  }
  
  const handleSubtaskCompleted = (stat, name, item) => {
    console.log(stat)
    const allProducts = todoCards
    const changeSubtask = allProducts.boards.filter((board) => board.name === selectedBoard)[0].columns.filter((column) => column.name === stat)[0].tasks.filter((task) => task.title === name)[0].subtasks.filter((subtask) => subtask.title === item)[0]
    
    changeSubtask.isCompleted = !changeSubtask.isCompleted
    setTodoCards(allProducts)
    localStorage.setItem('todos', JSON.stringify(allProducts))
  }

  useEffect(() => {
    if(!localStorage.getItem('todos')) {
      localStorage.setItem('todos', JSON.stringify(data))
      // setTodoCards(data)
    }
    setTodoCards(JSON.parse(localStorage.getItem('todos')))
  }, [])

  return (
    <div className={styles.container} data-theme={theme}>
      <Head>
        <title>Kanban</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/assets/favicon-32x32.png" />
      </Head>
      <header>
        <div className={sidebarOpened? styles.header_active:styles.header}>
          <img className={styles.logo} src="/assets/logo-dark.svg" alt="logo" />
          <hr className={styles.divider}/>
          <div className={styles.title}>Product launch</div>
        </div>
        <div className={styles.header}>
        <button onClick={() => setModalAddTask(true)} className={styles.add_new_task}>+ Add New Task</button>
        <div className={styles.features_btn}><div className={styles.circle}></div><div className={styles.circle}></div><div className={styles.circle}></div></div>
        </div>
      </header>
      {todoCards.boards?.filter((board) => board.name === selectedBoard)[0].columns.length > 0?
      <div className={sidebarOpened? styles.main_active :styles.main}>
        
        <div className={styles.col}>
          <div className={styles.subtitle}><div className={styles.todo_circle}></div>TODO ({todoCards.boards.filter((board) => board.name === selectedBoard)[0].columns.filter((col) => col.name === 'Todo')[0]?.tasks.length})</div>
          <div className={styles.content}>
            {todoCards.boards.filter((board) => board.name === selectedBoard)[0].columns.filter((col) => col.name === 'Todo')[0]?.tasks.map((task) => (
            <div onClick={() => handleClicked(task.title)} key={task.title} className={styles.todo}>
              <div className={styles.task_title}>{task.title}</div>
              <div className={styles.task_subtitle}>{task.subtasks.filter((subtask) => subtask.isCompleted === true).length} of {task.subtasks.length} subtasks</div>
            </div>
            ))}
          </div>
        </div>
        <div className={styles.col}>
          <div className={styles.subtitle}><div className={styles.todo_circle}></div>DOING ({todoCards.boards.filter((board) => board.name === selectedBoard)[0].columns.filter((col) => col.name === 'Doing')[0]?.tasks.length})</div>
          <div className={styles.content}>
            {todoCards.boards.filter((board) => board.name === selectedBoard)[0].columns.filter((col) => col.name === 'Doing')[0]?.tasks.map((task) => (
            <div onClick={() => handleClicked(task.title)} className={styles.todo}>
              <div className={styles.task_title}>{task.title}</div>
              <div className={styles.task_subtitle}>{task.subtasks.filter((subtask) => subtask.isCompleted === true).length} of {task.subtasks.length} subtasks</div>
            </div>
            ))}
          </div>
        </div>
        <div className={styles.col}>
          <div className={styles.subtitle}><div className={styles.todo_circle}></div>DONE ({todoCards.boards.filter((board) => board.name === selectedBoard)[0].columns.filter((col) => col.name === 'Done')[0]?.tasks.length})</div>
          <div className={styles.content}>
            {todoCards.boards.filter((board) => board.name === selectedBoard)[0].columns.filter((col) => col.name === 'Done')[0]?.tasks.map((task) => (
            <div onClick={() => handleClicked(task.title)} className={styles.todo}>
              <div className={styles.task_title}>{task.title}</div>
              <div className={styles.task_subtitle}>{task.subtasks.filter((subtask) => subtask.isCompleted === true).length} of {task.subtasks.length} subtasks</div>
            </div>
            ))}
          </div>
        </div>
        <div className={styles.newcolumn}>+ New Column</div>
        <div className={styles.nav}>
        <div className={sidebarOpened ? styles.toggle_active : styles.toggle} onClick={() => setSidebarOpened(!sidebarOpened)}>
          {sidebarOpened ? <div><img src="/assets/icon-hide-sidebar.svg" alt="hide" />Hide Sidebar</div> : <div><img src="/assets/icon-show-sidebar.svg" alt="show" /></div>}
        </div>
        <Sidebar data={todoCards} sidebarOpened={sidebarOpened} setSelectedBoard={setSelectedBoard}/>
        </div>
      </div>
      :<div className={sidebarOpened ? styles.empty_active : styles.empty}>
        <div className={styles.empty_title}>This board is empty. Create a new column to get started.</div>
        <button className={styles.add_new_task}>+ Add New Task</button>

        <div className={styles.nav}>
        <div className={sidebarOpened ? styles.toggle_active : styles.toggle} onClick={() => setSidebarOpened(!sidebarOpened)}>
          {sidebarOpened ? <div><img src="/assets/icon-hide-sidebar.svg" alt="hide" />Hide Sidebar</div> : <div><img src="/assets/icon-show-sidebar.svg" alt="show" /></div>}
        </div>
        <Sidebar switchTheme={switchTheme} data={todoCards} sidebarOpened={sidebarOpened} setSelectedBoard={setSelectedBoard}/>
        </div>
              
        </div>}
        {modalOpened && <Viewtask handleSubtaskCompleted={handleSubtaskCompleted} options={options} setModalOpened={setModalOpened} selectedBoard={selectedBoard} selectedTitle={selectedTitle} data={todoCards}/>}
        {modalAddTask && <Addtask taskTitle={taskTitle} setTaskTitle={setTaskTitle} taskDescription={taskDescription} setTaskDescription={setTaskDescription} handleAddTask={handleAddTask} inputList={inputList} setInputList={setInputList} options={options} stage={stage} setStage={setStage} setModalAddTask={setModalAddTask}/>}
        {/* <div className={sidebarOpened ? styles.nav_menu_active : styles.nav_menu}>
          <div className={styles.subtitle}>ALL BOARDS ({data.boards.length})</div>
          {data.boards.map((board) =><div key={board.name}><img src="/assets/icon-board.svg" alt="board" />{board.name}</div>)}
          <div><img src="/assets/icon-board.svg" alt="board" />+ Create New Board</div>
        </div> */}
      
    </div>
  )
}
